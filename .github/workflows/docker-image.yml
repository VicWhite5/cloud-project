name: Docker Image CI
run-name: Víctor, Ignacio y Ori are making an Action 🐐🐺🎀
on:
  push:
    branches: [ "main" ]
jobs:

  build:

    runs-on: ubuntu-latest

    steps: 
    - name: Checkout code 
      uses: actions/checkout@v4 
      with:
        fetch-depth: 0

    - name: Git Semantic Version
      uses: PaulHatch/semantic-version@v4.0.3 
      with:
        major_pattern: "major:"
        minor_pattern: "feat:"
        format: "${major}.${minor}.${patch}-prerelease.${increment}"
      id: version

    - name: Docker login 
      env: 
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} 
      run: |
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

    - name: Build the Docker images 
      env: 
        NEW_VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "Building frontend 📱 📱 📱"
        cd backend
        echo "Building backend 🔙 🔙 🔙"
        echo "Building backend-cp:$NEW_VERSION 🔙 🔙 🔙 🛠 🛠 🛠"
        docker build --tag victor281201/backend-cp:$NEW_VERSION . 
        echo "Building backend-cp:latest 🔙 🔙 🔙 🛠 🛠 🛠"
        docker build --tag victor281201/backend-cp:latest . 

    - name: Push the Docker images
      env: 
        NEW_VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "Pushing backend-cp:$NEW_VERSION 🔙 🔙 🔙🎁 🎁 🎁"
        docker push victor281201/backend-cp:$NEW_VERSION 
        echo "Pushing backend-cp:latest 🔙 🔙 🔙🎁 🎁 🎁"
        docker push victor281201/backend-cp:latest

  deploy-kubernetes:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          echo "Setting Up the environment for microk8s 🚢 🚢 🚢"
          sudo snap install jq
          sudo snap install microk8s --channel 1.29-strict/stable
          GROUP=snap_microk8s
          sudo usermod -a -G $GROUP $USER
          newgrp $GROUP
          mkdir ~/.kube
          sudo chown -f -R $USER ~/.kube
          sleep 90
          sudo microk8s enable hostpath-storage
          sudo sysctl -w fs.inotify.max_user_instances=1280 | sudo tee /etc/sysctl.d/microk8s.conf
          sudo sysctl -w fs.inotify.max_user_watches=655360 | sudo tee -a /etc/sysctl.d/microk8s.conf

      - name: Set up MongoDB
        run: |
          echo "Setting Up MongoDB 🍃 🍃 🍃"
          cd k8s
          sudo microk8s.kubectl apply -f mongo-secrets.yml
          sudo microk8s.kubectl apply -f mongo-config.yml
          sudo microk8s.kubectl apply -f mongo.yml
          sleep 60

      - name: Set up the Data Base
        run: |
          echo "Setting Up the Data Base 🍃 🍃 🍃"
          sudo microk8s.kubectl exec deployment.apps/mongo-deployment -- bash -c "echo '(async function() { await use(\"ramen-db\"); await db.createUser({ user: \"root\", pwd: \"password\", roles: [ { role: \"readWrite\", db: \"ramen-db\" } ] })(async function() { await use(\"ramen-db\"); await db.createUser({ user: \"root\", pwd: \"password\", roles: [ { role: \"readWrite\", db: \"ramen-db\" } ] })()' | mongosh -u root -p password"
          sudo microk8s.kubectl exec deployment.apps/mongo-deployment -- bash -c "echo '(async function() { await use(\"ramen-db\"); await db.createUser({ user: \"root\", pwd: \"password\", roles: [ { role: \"readWrite\", db: \"ramen-db\" } ] })()' | mongosh -u root -p password"      
      - name: Set Up the Backend
        run: |
          echo "Setting Up the Backend 🦁 🦁 🦁"
          cd k8s
          sudo microk8s.kubectl apply -f backend.yml
          sleep 60
          sudo microk8s.kubectl logs deployment.apps/backend-deployment
          NODE_IP=$(sudo microk8s.kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          curl http://$NODE_IP:30300/api/ramens | jq

      - name: Set Up the Frontend
        run: |
          echo "Setting Up the Frontend 📱 📱 📱"
          cd k8s
          sudo microk8s.kubectl apply -f frontend.yml
          sleep 90
          NODE_IP=$(sudo microk8s.kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          curl http://$NODE_IP:30080/
